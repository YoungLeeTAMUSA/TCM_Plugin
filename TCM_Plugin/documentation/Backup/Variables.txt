/**
   * Looks for local variable declarations. For every occurrence of a local
   * variable, a {@link VariableBindingManager} is created and stored in {@link #listLocalVariables} map.
   * 
   * @param node
   *          the node to visit
   * @return static {@code false} to prevent that the simple name in the
   *         declaration is understood by {@link #visit(SimpleName)} as
   *         reference
   */
  @Override
  public boolean visit(VariableDeclarationStatement node) {
    System.out.println("VariableDeclarationStatement - " + node);
    for (Iterator<?> iter = node.fragments().iterator(); iter.hasNext();) {
      VariableDeclarationFragment fragment = (VariableDeclarationFragment) iter.next();

      // VariableDeclarationFragment: is the plain variable declaration part.
      // Example: "int x=0, y=0;" contains two VariableDeclarationFragments, "x=0" and "y=0"
      IVariableBinding binding = fragment.resolveBinding();

      // Creates the manager of the fragment.
      VariableBindingManager manager = new VariableBindingManager(fragment);

      getLocalVariables().put(binding, manager);

      // The first assignment is the initializer.
      manager.variableInitialized(fragment.getInitializer());
    }

    return false; // Prevents that SimpleName is interpreted as reference.
  }

  /**
   * Visits {@link Assignment} AST nodes (e.g. {@code x = 7 + 8} ).
   * Resolves the binding of the left hand side (in the example: {@code x}).
   * If the binding is found in the {@link #listLocalVariables} map, we have an
   * assignment of a local variable.
   * The variable binding manager of this local variable then has to be informed about this assignment.
   * 
   * @param node
   *          the node to visit
   */
  @Override
  public boolean visit(Assignment node) {
    System.out.println("Assignment - " + node);
    if (node.getLeftHandSide().getNodeType() == ASTNode.SIMPLE_NAME) {
      IBinding binding = ((SimpleName) node.getLeftHandSide()).resolveBinding();
      if (getLocalVariables().containsKey(binding)) {
        // It contains the key -> it is an assignment of a local variable.

        VariableBindingManager manager = getLocalVariables().get(binding);

        manager.variableInitialized(node.getRightHandSide());
      }
    }

    return false; // Prevents that SimpleName is interpreted as reference.
  }

  /**
   * Visits {@link SimpleName} AST nodes. Resolves the binding of the simple
   * name and looks for it in the {@link #listLocalVariables} map.
   * If the binding is found, this is a reference to a local variable.
   * The variable binding manager of this local variable then has to be informed about that reference.
   * 
   * @param node
   *          the node to visit
   */
  @Override
  public boolean visit(SimpleName node) {
    IBinding binding = node.resolveBinding();
    if (getLocalVariables().containsKey(binding)) {
      System.out.println("SimpleName - " + node);
      VariableBindingManager manager = getLocalVariables().get(binding);
      manager.variableRefereneced(node);
    }

    return true;
  }
package net.thecodemaster.sap.analyzers;

import net.thecodemaster.sap.reporters.Reporter;
import net.thecodemaster.sap.utils.Creator;
import net.thecodemaster.sap.verifiers.security.vulnerabilities.CookiePoisoningVerifier;
import net.thecodemaster.sap.verifiers.security.vulnerabilities.SQLInjectionVerifier;
import net.thecodemaster.sap.verifiers.security.vulnerabilities.SecurityMisconfigurationVerifier;
import net.thecodemaster.sap.verifiers.security.vulnerabilities.XSSVerifier;

import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;

/**
 * @author Luciano Sampaio
 */
public class SecurityVulnerabilityAnalyzer extends Analyzer {

  /**
   * @param cookiePoisoning
   * @param crossSiteScripting
   * @param sqlInjection
   * @param securityMisconfiguration
   */
  public SecurityVulnerabilityAnalyzer(boolean cookiePoisoning, boolean crossSiteScripting, boolean sqlInjection,
    boolean securityMisconfiguration) {
    verifiers = Creator.newList();

    if (cookiePoisoning) {
      verifiers.add(new CookiePoisoningVerifier());
    }
    if (crossSiteScripting) {
      verifiers.add(new XSSVerifier());
    }
    if (sqlInjection) {
      verifiers.add(new SQLInjectionVerifier());
    }
    if (securityMisconfiguration) {
      verifiers.add(new SecurityMisconfigurationVerifier());
    }
  }

  @Override
  public boolean run(IResource resource, Reporter reporter) throws CoreException {
    // if (isToPerformDetection(resource)) {
    // ICompilationUnit cu = JavaCore.createCompilationUnitFrom((IFile) resource);
    //
    // if (cu.isStructureKnown()) {
    // // Creates the AST for the ICompilationUnits.
    // Timer timer = (new Timer("Parsing: " + resource.getName())).start();
    // CompilationUnit compilationUnit = parse(cu);
    // PluginLogger.logInfo(timer.stop().toString());
    //
    // timer = (new Timer("Verifying: " + resource.getName())).start();
    // for (Verifier verifier : verifiers) {
    // verifier.run(compilationUnit, reporter);
    // }
    // PluginLogger.logInfo(timer.stop().toString());
    // }
    // }
    // Return true to continue visiting children.
    return true;
  }

}

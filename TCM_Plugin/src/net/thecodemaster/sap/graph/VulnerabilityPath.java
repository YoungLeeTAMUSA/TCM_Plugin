package net.thecodemaster.sap.graph;

import java.util.List;

import net.thecodemaster.sap.utils.Creator;

import org.eclipse.jdt.core.dom.Expression;

/**
 * @author Luciano Sampaio
 */
public class VulnerabilityPath {

	private final Expression							root;
	private VulnerabilityPath							parent;
	private final List<VulnerabilityPath>	childPaths;
	private boolean												foundVulnerability;
	private String												message;

	public VulnerabilityPath(Expression root) {
		this.root = root;
		childPaths = Creator.newList();
	}

	public VulnerabilityPath(Expression root, VulnerabilityPath parent) {
		this(root);
		this.parent = parent;
	}

	public Expression getRoot() {
		return root;
	}

	public String getMessage() {
		if (null != message) {
			return message;
		}

		for (VulnerabilityPath vp : childPaths) {
			message = vp.getMessage();
			if (null != message) {
				break;
			}
		}

		return message;
	}

	public VulnerabilityPath addNodeToPath(Expression node) {
		VulnerabilityPath nvp = new VulnerabilityPath(node, this);
		childPaths.add(nvp);

		return nvp;
	}

	public void foundVulnerability(Expression expr, String message) {
		foundVulnerability();

		this.message = message;
	}

	/**
	 * This method set the foundVulnerability to true on the parent's path.
	 */
	private void foundVulnerability() {
		foundVulnerability = true;

		if (null != parent) {
			parent.foundVulnerability();
		}

	}

	public void foundInfinitiveLoop(Expression expr) {
		// TODO
	}

	public boolean isEmpty() {
		if (foundVulnerability) {
			return false;
		}

		if (childPaths.isEmpty()) {
			return true;
		}

		for (VulnerabilityPath vp : childPaths) {
			if (!vp.isEmpty()) {
				return false;
			}
		}

		return true;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + getRoot().hashCode();
		return result;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @param obj
	 *          Object
	 * @return boolean
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (null == obj) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}

		VulnerabilityPath other = (VulnerabilityPath) obj;
		if (!getRoot().equals(other.getRoot())) {
			return false;
		}

		return true;
	}

}

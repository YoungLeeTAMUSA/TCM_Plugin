package net.thecodemaster.sap.graph;

import java.util.List;

import net.thecodemaster.sap.utils.Creator;

import org.eclipse.jdt.core.dom.Expression;

/**
 * @author Luciano Sampaio
 */
public class VulnerabilityPath {

  private Expression              root;
  private boolean                 foundVulnerability;
  private List<VulnerabilityPath> childPaths;

  public VulnerabilityPath(Expression root) {
    this.root = root;
    foundVulnerability = false;
    childPaths = Creator.newList();
  }

  public VulnerabilityPath addNodeToPath(Expression node) {
    VulnerabilityPath nvp = new VulnerabilityPath(node);
    childPaths.add(nvp);

    return nvp;
  }

  public boolean isEmpty() {
    if (foundVulnerability) {
      return false;
    }

    if (childPaths.isEmpty()) {
      return true;
    }

    for (VulnerabilityPath vp : childPaths) {
      if (!vp.isEmpty()) {
        return false;
      }
    }

    return true;
  }

  public void foundVulnerability(Expression expr, String message) {
    foundVulnerability = true;

    System.out.println(message);
  }

  public Expression getRoot() {
    return root;
  }

  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + getRoot().hashCode();
    return result;
  }

  /**
   * {@inheritDoc}
   * 
   * @param obj Object
   * @return boolean
   */
  @Override
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }

    if (null == obj) {
      return false;
    }
    if (getClass() != obj.getClass()) {
      return false;
    }

    VulnerabilityPath other = (VulnerabilityPath) obj;
    if (!getRoot().equals(other.getRoot())) {
      return false;
    }

    return true;
  }

}

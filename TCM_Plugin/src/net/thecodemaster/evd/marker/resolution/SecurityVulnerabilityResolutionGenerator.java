package net.thecodemaster.evd.marker.resolution;

import java.util.List;
import java.util.Map;

import net.thecodemaster.evd.constant.Constant;
import net.thecodemaster.evd.helper.Creator;
import net.thecodemaster.evd.logger.PluginLogger;
import net.thecodemaster.evd.xmlloader.LoaderResolutionMessages;

import org.eclipse.core.resources.IMarker;
import org.eclipse.ui.IMarkerResolution;
import org.eclipse.ui.IMarkerResolution2;
import org.eclipse.ui.IMarkerResolutionGenerator2;

/**
 * @author Luciano Sampaio
 */
public class SecurityVulnerabilityResolutionGenerator implements IMarkerResolutionGenerator2 {

	private int																			position	= 0;
	private static Map<Integer, ResolutionMessage>	resolutionMessages;

	private int getPosition() {
		return ++position;
	}

	private Map<Integer, ResolutionMessage> getResolutionMessages() {
		// if (null == resolutionMessages) {
		resolutionMessages = (new LoaderResolutionMessages()).load();
		// }

		return resolutionMessages;
	}

	private int getTypeVulnerability(IMarker marker) {
		return marker.getAttribute(Constant.Marker.TYPE_SECURITY_VULNERABILITY, 0);
	}

	@Override
	public boolean hasResolutions(IMarker marker) {
		return true;
	}

	@Override
	public IMarkerResolution[] getResolutions(IMarker marker) {
		List<IMarkerResolution2> resolutions = Creator.newList();

		int typeVulnerability = getTypeVulnerability(marker);
		ResolutionMessage resolutionMessage = getResolutionMessages().get(typeVulnerability);
		switch (typeVulnerability) {
			case Constant.VERIFIER_ID_COMMAND_INJECTION:
				resolutions.add(new CommandInjectionResolution(getPosition(), resolutionMessage, marker));
				break;
			case Constant.VERIFIER_ID_COOKIE_POISONING:
				resolutions.add(new CookiePoisoningResolution(getPosition(), resolutionMessage, marker));
				break;
			case Constant.VERIFIER_ID_CROSS_SITE_SCRIPTING:
				resolutions.add(new CrossSiteScriptingResolution(getPosition(), resolutionMessage, marker));
				break;
			case Constant.VERIFIER_ID_PATH_TRAVERSAL:
				resolutions.add(new PathTraversalResolution(getPosition(), resolutionMessage, marker));
				break;
			case Constant.VERIFIER_ID_SECURITY_MISCONFIGURATION:
				resolutions.add(new SecurityMisconfigurationResolution(getPosition(), resolutionMessage, marker));
				break;
			case Constant.VERIFIER_ID_SQL_INJECTION:
				resolutions.add(new SQLInjectionResolution(getPosition(), resolutionMessage, marker));
				break;
			case Constant.VERIFIER_ID_UNVALIDATED_REDIRECTING:
				resolutions.add(new UnvalidatedRedirectingResolution(getPosition(), resolutionMessage, marker));
				break;
			default:
				PluginLogger.logIfDebugging("getResolutions Default Case");
				break;
		}

		// The ignore resolution will always be displayed.
		resolutions.add(new IgnoreResolution(getPosition(), getResolutionMessages().get(
				Constant.RESOLUTION_ID_IGNORE_WARNING), marker));
		return resolutions.toArray(new IMarkerResolution[resolutions.size()]);
	}

}

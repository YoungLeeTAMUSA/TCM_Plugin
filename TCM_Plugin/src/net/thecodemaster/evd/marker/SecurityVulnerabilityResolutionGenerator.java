package net.thecodemaster.evd.marker;

import java.util.ArrayList;
import java.util.List;

import net.thecodemaster.evd.constant.Constant;
import net.thecodemaster.evd.logger.PluginLogger;

import org.eclipse.core.resources.IMarker;
import org.eclipse.ui.IMarkerResolution;
import org.eclipse.ui.IMarkerResolution2;
import org.eclipse.ui.IMarkerResolutionGenerator2;

public class SecurityVulnerabilityResolutionGenerator implements IMarkerResolutionGenerator2 {

	private int getTypeVulnerability(IMarker marker) {
		return marker.getAttribute(Constant.Marker.TYPE_SECURITY_VULNERABILITY, 0);
	}

	@Override
	public boolean hasResolutions(IMarker marker) {
		switch (getTypeVulnerability(marker)) {
			case Constant.ID_VERIFIER_COOKIE_POISONING:
				return true;
			case Constant.ID_VERIFIER_CROSS_SITE_SCRIPTING:
				return true;
			case Constant.ID_VERIFIER_SECURITY_MISCONFIGURATION:
				return true;
			case Constant.ID_VERIFIER_SQL_INJECTION:
				return true;
			default:
				PluginLogger.logIfDebugging("SecurityVulnerabilitiesResolutionGenerator Default Case");
				return false;
		}
	}

	@Override
	public IMarkerResolution[] getResolutions(IMarker marker) {
		List<IMarkerResolution2> resolutions = new ArrayList<IMarkerResolution2>();

		switch (getTypeVulnerability(marker)) {
			case Constant.ID_VERIFIER_COOKIE_POISONING:
				resolutions.add(new SecurityMisconfigurationResolution(marker));
				break;
			case Constant.ID_VERIFIER_CROSS_SITE_SCRIPTING:
				resolutions.add(new SecurityMisconfigurationResolution(marker));
				break;
			case Constant.ID_VERIFIER_SECURITY_MISCONFIGURATION:
				resolutions.add(new SecurityMisconfigurationResolution(marker));
				break;
			case Constant.ID_VERIFIER_SQL_INJECTION:
				resolutions.add(new SecurityMisconfigurationResolution(marker));
				break;
			default:
				PluginLogger.logIfDebugging("getResolutions Default Case");
				break;
		}

		return resolutions.toArray(new IMarkerResolution[resolutions.size()]);
	}

}

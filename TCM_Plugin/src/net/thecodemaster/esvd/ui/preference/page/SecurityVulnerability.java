package net.thecodemaster.esvd.ui.preference.page;

import java.util.List;

import net.thecodemaster.esvd.Activator;
import net.thecodemaster.esvd.constant.Constant;
import net.thecodemaster.esvd.helper.Creator;
import net.thecodemaster.esvd.ui.l10n.Message;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jface.preference.BooleanFieldEditor;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.ui.IWorkbench;

public class SecurityVulnerability extends AbstracPreferencePage {

	private Table				projectsList;
	private BooleanFieldEditor	ckbtnCommandInjection;
	private BooleanFieldEditor	ckbtnCookiePoisoning;
	private BooleanFieldEditor	ckbtnCrossSiteScripting;
	private BooleanFieldEditor	ckbtnHTTPResponseSplitting;
	private BooleanFieldEditor	ckbtnLDAPInjection;
	private BooleanFieldEditor	ckbtnLogForging;
	private BooleanFieldEditor	ckbtnPathTraversal;
	private BooleanFieldEditor	ckbtnReflectionInjection;
	private BooleanFieldEditor	ckbtnSecurityMisconfiguration;
	private BooleanFieldEditor	ckbtnSQLInjection;
	private BooleanFieldEditor	ckbtnXPathInjection;

	public SecurityVulnerability() {
	}

	public SecurityVulnerability(String title) {
		super(title);
	}

	public SecurityVulnerability(String title, ImageDescriptor image) {
		super(title, image);
	}

	@Override
	public void init(IWorkbench workbench) {
		setPreferenceStore(Activator.getDefault().getPreferenceStore());
	}

	@Override
	protected Control createContents(Composite parent) {
		Composite composite = createComposite(parent);

		createSecurityVulnerabilityOptions(composite);
		createMonitoredProjectsSelection(composite);

		return composite;
	}

	protected Composite createComposite(Composite parent) {
		Composite composite = new Composite(parent, SWT.NULL);

		GridLayout layout = new GridLayout();
		layout.marginWidth = 0;
		layout.marginHeight = 0;
		composite.setLayout(layout);

		GridData data = new GridData(GridData.FILL_BOTH | GridData.VERTICAL_ALIGN_FILL | GridData.HORIZONTAL_ALIGN_FILL);
		composite.setLayoutData(data);
		composite.setFont(parent.getFont());

		return composite;
	}

	private void createSecurityVulnerabilityOptions(Composite composite) {
		// Group output option and its children.
		Group groupSecurityVulnerabilities = new Group(composite, SWT.NONE);
		groupSecurityVulnerabilities.setLayout(new GridLayout());
		groupSecurityVulnerabilities.setLayoutData(new GridData(GridData.FILL, GridData.FILL, true, false));
		groupSecurityVulnerabilities.setText(Message.PrefPageSecurityVulnerability.LABEL_SECURITY_VULNERABILITIES);

		// The security vulnerabilities that will be detected in the source code.
		ckbtnCommandInjection = createBooleanField(Constant.PrefPageSecurityVulnerability.FIELD_COMMAND_INJECTION,
				Message.PrefPageSecurityVulnerability.LABEL_COMMAND_INJECTION, groupSecurityVulnerabilities);
		ckbtnCookiePoisoning = createBooleanField(Constant.PrefPageSecurityVulnerability.FIELD_COOKIE_POISONING,
				Message.PrefPageSecurityVulnerability.LABEL_COOKIE_POISONING, groupSecurityVulnerabilities);
		ckbtnCrossSiteScripting = createBooleanField(Constant.PrefPageSecurityVulnerability.FIELD_CROSS_SITE_SCRIPTING,
				Message.PrefPageSecurityVulnerability.LABEL_CROSS_SITE_SCRIPTING, groupSecurityVulnerabilities);
		ckbtnHTTPResponseSplitting = createBooleanField(
				Constant.PrefPageSecurityVulnerability.FIELD_HTTP_RESPONSE_SPLITTING,
				Message.PrefPageSecurityVulnerability.LABEL_HTTP_RESPONSE_SPLITTING, groupSecurityVulnerabilities);
		ckbtnLDAPInjection = createBooleanField(Constant.PrefPageSecurityVulnerability.FIELD_LDAP_INJECTION,
				Message.PrefPageSecurityVulnerability.LABEL_LDAP_INJECTION, groupSecurityVulnerabilities);
		ckbtnLogForging = createBooleanField(Constant.PrefPageSecurityVulnerability.FIELD_LOG_FORGING,
				Message.PrefPageSecurityVulnerability.LABEL_LOG_FORGING, groupSecurityVulnerabilities);
		ckbtnPathTraversal = createBooleanField(Constant.PrefPageSecurityVulnerability.FIELD_PATH_TRAVERSAL,
				Message.PrefPageSecurityVulnerability.LABEL_PATH_TRAVERSAL, groupSecurityVulnerabilities);
		ckbtnReflectionInjection = createBooleanField(
				Constant.PrefPageSecurityVulnerability.FIELD_REFLECTION_INJECTION,
				Message.PrefPageSecurityVulnerability.LABEL_REFLECTION_INJECTION, groupSecurityVulnerabilities);
		ckbtnSecurityMisconfiguration = createBooleanField(
				Constant.PrefPageSecurityVulnerability.FIELD_SECURITY_MISCONFIGURATION,
				Message.PrefPageSecurityVulnerability.LABEL_SECURITY_MISCONFIGURATION, groupSecurityVulnerabilities);
		ckbtnSQLInjection = createBooleanField(Constant.PrefPageSecurityVulnerability.FIELD_SQL_INJECTION,
				Message.PrefPageSecurityVulnerability.LABEL_SQL_INJECTION, groupSecurityVulnerabilities);
		ckbtnXPathInjection = createBooleanField(Constant.PrefPageSecurityVulnerability.FIELD_XPATH_INJECTION,
				Message.PrefPageSecurityVulnerability.LABEL_XPATH_INJECTION, groupSecurityVulnerabilities);
	}

	private void createMonitoredProjectsSelection(Composite composite) {
		Label label = new Label(composite, SWT.NONE);
		label.setText(Message.PrefPageSecurityVulnerability.LABEL_MONITORED_PROJECTS);
		label.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));

		projectsList = new Table(composite, SWT.BORDER | SWT.CHECK | SWT.H_SCROLL | SWT.V_SCROLL);
		projectsList.setFont(composite.getFont());
		projectsList.setLayoutData(new GridData(GridData.FILL_BOTH));

		populateProjectsList();
	}

	private void populateProjectsList() {
		// The collection of projects which exist under this workspace.
		List<IProject> projects = getListOfProjectsInWorkspace();

		// The collection of projects that are being monitored by our plug-in.
		List<IProject> monitoredProjects = getListOfMonitoredProjects();

		for (IProject project : projects) {
			TableItem item = new TableItem(projectsList, SWT.NONE);

			item.setText(project.getName());
			item.setData(project.getName());
			// If the current project is inside the list of monitored projects, then this project should be checked.
			item.setChecked(monitoredProjects.contains(project));
		}
	}

	@Override
	public void performDefaults() {
		IPreferenceStore store = getPreferenceStore();

		store.setDefault(Constant.PrefPageSecurityVulnerability.FIELD_COMMAND_INJECTION, true);
		store.setDefault(Constant.PrefPageSecurityVulnerability.FIELD_COOKIE_POISONING, true);
		store.setDefault(Constant.PrefPageSecurityVulnerability.FIELD_CROSS_SITE_SCRIPTING, true);
		store.setDefault(Constant.PrefPageSecurityVulnerability.FIELD_HTTP_RESPONSE_SPLITTING, true);
		store.setDefault(Constant.PrefPageSecurityVulnerability.FIELD_LDAP_INJECTION, true);
		store.setDefault(Constant.PrefPageSecurityVulnerability.FIELD_LOG_FORGING, true);
		store.setDefault(Constant.PrefPageSecurityVulnerability.FIELD_PATH_TRAVERSAL, true);
		store.setDefault(Constant.PrefPageSecurityVulnerability.FIELD_REFLECTION_INJECTION, true);
		store.setDefault(Constant.PrefPageSecurityVulnerability.FIELD_SECURITY_MISCONFIGURATION, true);
		store.setDefault(Constant.PrefPageSecurityVulnerability.FIELD_SQL_INJECTION, true);
		store.setDefault(Constant.PrefPageSecurityVulnerability.FIELD_XPATH_INJECTION, true);

		loadDefaultValue(ckbtnCommandInjection);
		loadDefaultValue(ckbtnCookiePoisoning);
		loadDefaultValue(ckbtnCrossSiteScripting);
		loadDefaultValue(ckbtnHTTPResponseSplitting);
		loadDefaultValue(ckbtnLDAPInjection);
		loadDefaultValue(ckbtnLogForging);
		loadDefaultValue(ckbtnPathTraversal);
		loadDefaultValue(ckbtnReflectionInjection);
		loadDefaultValue(ckbtnSecurityMisconfiguration);
		loadDefaultValue(ckbtnSQLInjection);
		loadDefaultValue(ckbtnXPathInjection);

		if (null != projectsList) {
			// It will iterate over all the projects in the workspace and check it, so the plug-in will scan the
			// project.
			TableItem items[] = projectsList.getItems();
			for (TableItem item : items) {
				item.setChecked(true);
			}
		}

		super.performDefaults();
	}

	@Override
	public boolean performOk() {
		// Save (store) the content chosen by the developer back to the eclipse's preferences.
		storeValue(ckbtnCommandInjection);
		storeValue(ckbtnCookiePoisoning);
		storeValue(ckbtnCrossSiteScripting);
		storeValue(ckbtnHTTPResponseSplitting);
		storeValue(ckbtnLDAPInjection);
		storeValue(ckbtnLogForging);
		storeValue(ckbtnPathTraversal);
		storeValue(ckbtnReflectionInjection);
		storeValue(ckbtnSecurityMisconfiguration);
		storeValue(ckbtnSQLInjection);
		storeValue(ckbtnXPathInjection);

		// The list with the projects to be monitored.
		List<IProject> selectedProjects = Creator.newList();

		// Iterate over the list of selected projects and if they are checked, add them to the list.
		TableItem items[] = projectsList.getItems();
		IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
		for (TableItem item : items) {
			if (item.getChecked()) {
				selectedProjects.add(root.getProject((String) item.getData()));
			}
		}

		// Save the list back to the preference store.
		setProjectsToListOfMonitoredProjects(selectedProjects);

		return super.performOk();
	}
}

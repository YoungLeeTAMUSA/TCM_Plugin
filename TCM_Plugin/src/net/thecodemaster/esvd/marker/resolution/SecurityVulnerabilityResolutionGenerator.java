package net.thecodemaster.esvd.marker.resolution;

import java.util.List;
import java.util.Map;

import net.thecodemaster.esvd.constant.Constant;
import net.thecodemaster.esvd.helper.Creator;
import net.thecodemaster.esvd.xmlloader.LoaderResolutionMessages;

import org.eclipse.core.resources.IMarker;
import org.eclipse.ui.IMarkerResolution;
import org.eclipse.ui.IMarkerResolution2;
import org.eclipse.ui.IMarkerResolutionGenerator2;

/**
 * @author Luciano Sampaio
 */
public class SecurityVulnerabilityResolutionGenerator implements IMarkerResolutionGenerator2 {

	private int																			position	= 0;
	private static Map<Integer, ResolutionMessage>	resolutionMessages;

	private int getPosition() {
		return ++position;
	}

	private Map<Integer, ResolutionMessage> getResolutionMessages() {
		if (null == resolutionMessages) {
			resolutionMessages = (new LoaderResolutionMessages()).load();
		}

		return resolutionMessages;
	}

	private int getTypeVulnerability(IMarker marker) {
		return marker.getAttribute(Constant.Marker.TYPE_SECURITY_VULNERABILITY, 0);
	}

	@Override
	public boolean hasResolutions(IMarker marker) {
		return true;
	}

	@Override
	public IMarkerResolution[] getResolutions(IMarker marker) {
		List<IMarkerResolution2> resolutions = Creator.newList();

		int typeVulnerability = getTypeVulnerability(marker);
		ResolutionMessage resolutionMessage = getResolutionMessages().get(typeVulnerability);
		switch (typeVulnerability) {
		// Sub-Vulnerabilities' types.
		// case Constant.VERIFIER_ID_COMMAND_INJECTION: // 01
		// case Constant.Vulnerability.ENTRY_POINT: // 30
		// resolutions.add(new ResolutionEntryPointNotSanitized(getPosition(), resolutionMessage, marker));
		// break;
		// case Constant.Vulnerability.SECURITY_MISCONFIGURATION_HARD_CODED_CONTENT: // 40
		// resolutions.add(new ResolutionHardCodeContent(getPosition(), resolutionMessage, marker));
		// break;
		// case Constant.Vulnerability.SQL_INJECTION_STRING_CONCATENATION: // 50
		// resolutions.add(new ResolutionStringConcatenation(getPosition(), resolutionMessage, marker));
		// break;
		// case Constant.Vulnerability.INFORMATION_LEAKAGE: // 60
		// resolutions.add(new ResolutionInformationLeakage(getPosition(), resolutionMessage, marker));
		// break;
		// default:
		// PluginLogger.logIfDebugging("getResolutions Default Case: " + typeVulnerability);
		// break;
		}

		// The ignore resolution will always be displayed.
		resolutions.add(new IgnoreResolution(getPosition(), getResolutionMessages().get(
				Constant.RESOLUTION_ID_IGNORE_WARNING), marker));

		// Testing Encoding Resolution
		resolutions.add(new HTMLEncodingResolution(getPosition(), marker));
		resolutions.add(new HTMLAttributeEncodingResolution(getPosition(), marker));
		resolutions.add(new XMLEncodingResolution(getPosition(), marker));
		resolutions.add(new XMLAttributeEncodingResolution(getPosition(), marker));
		resolutions.add(new CSSEncodingResolution(getPosition(), marker));
		resolutions.add(new JavaScriptEncodingResolution(getPosition(), marker));
		resolutions.add(new VBScriptEncodingResolution(getPosition(), marker));
		resolutions.add(new XPathEncodingResolution(getPosition(), marker));
		resolutions.add(new LDAPEncodingResolution(getPosition(), marker));
		resolutions.add(new DNEncodingResolution(getPosition(), marker));
		resolutions.add(new WindowsEncodingResolution(getPosition(), marker));
		resolutions.add(new UnixEncodingResolution(getPosition(), marker));
		resolutions.add(new MySQLEncodingResolution(getPosition(), marker));
		resolutions.add(new OracleEncodingResolution(getPosition(), marker));
		resolutions.add(new DB2EncodingResolution(getPosition(), marker));

		return resolutions.toArray(new IMarkerResolution[resolutions.size()]);
	}
}

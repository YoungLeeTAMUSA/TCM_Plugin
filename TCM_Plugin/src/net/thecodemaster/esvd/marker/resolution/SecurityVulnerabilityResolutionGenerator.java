package net.thecodemaster.esvd.marker.resolution;

import java.util.List;
import java.util.Map;

import net.thecodemaster.esvd.constant.Constant;
import net.thecodemaster.esvd.helper.Creator;
import net.thecodemaster.esvd.xmlloader.LoaderResolutionMessages;

import org.eclipse.core.resources.IMarker;
import org.eclipse.ui.IMarkerResolution;
import org.eclipse.ui.IMarkerResolution2;
import org.eclipse.ui.IMarkerResolutionGenerator2;

/**
 * @author Luciano Sampaio
 */
public class SecurityVulnerabilityResolutionGenerator implements IMarkerResolutionGenerator2 {

	private List<IMarkerResolution2>								resolutions;
	private static Map<Integer, ResolutionMessage>	resolutionMessages;

	@Override
	public boolean hasResolutions(IMarker marker) {
		return true;
	}

	@Override
	public IMarkerResolution[] getResolutions(IMarker marker) {
		resolutions = Creator.newList();
		int typeVulnerability = getTypeVulnerability(marker);
		ResolutionMessage resolutionMessage = getResolutionMessages().get(typeVulnerability);

		switch (typeVulnerability) {
			case Constant.VERIFIER_ID_COMMAND_INJECTION:
				addCommandInjectionResolutions();
				break;
			case Constant.VERIFIER_ID_COOKIE_POISONING:
				addCookiePoisoningResolutions();
				break;
			case Constant.VERIFIER_ID_CROSS_SITE_SCRIPTING:
				addCrossSiteScriptingResolutions();
				break;
			case Constant.VERIFIER_ID_HTTP_RESPONSE_SPLITTING:
				addHTTPResponseSplittingResolutions();
				break;
			case Constant.VERIFIER_ID_LDAP_INJECTION:
				addLDAPInjectionResolutions();
				break;
			case Constant.VERIFIER_ID_LOG_FORGING:
				addLogForgingResolutions();
				break;
			case Constant.VERIFIER_ID_PATH_TRAVERSAL:
				addPathTraversalResolutions();
				break;
			case Constant.VERIFIER_ID_REFLECTION_INJECTION:
				addReflectionInjectionResolutions();
				break;
			case Constant.VERIFIER_ID_SECURITY_MISCONFIGURATION:
				addSecurityMisconfigurationResolutions();
				break;
			case Constant.VERIFIER_ID_SQL_INJECTION:
				addSQLInjectionResolutions();
				break;
			case Constant.VERIFIER_ID_XPATH_INJECTION:
				addXPathInjectionResolutions();
				break;
			case Constant.Vulnerability.ENTRY_POINT:
				// TODO Find a better way to treat entry point
				// resolutions.add(new EntryPointNotSanitizedResolution(resolutionMessage, marker));
				addEntryPointNotSanitizedResolution();
				break;
		}

		resolutions.add(new IgnoreResolution(getResolutionMessages().get(Constant.RESOLUTION_ID_IGNORE_WARNING), marker));

		return resolutions.toArray(new IMarkerResolution[resolutions.size()]);
	}

	private int getTypeVulnerability(IMarker marker) {
		return marker.getAttribute(Constant.Marker.TYPE_SECURITY_VULNERABILITY, 0);
	}

	private Map<Integer, ResolutionMessage> getResolutionMessages() {
		if (null == resolutionMessages) {
			resolutionMessages = (new LoaderResolutionMessages()).load();
		}

		return resolutionMessages;
	}

	private void addCommandInjectionResolutions() {
		resolutions.add(new WindowsEncodingResolution());
		resolutions.add(new UnixEncodingResolution());
	}

	private void addCookiePoisoningResolutions() {
		// No resolutions implemented (yet)
	}

	private void addCrossSiteScriptingResolutions() {
		resolutions.add(new HTMLEncodingResolution());
		resolutions.add(new HTMLAttributeEncodingResolution());
		resolutions.add(new XMLEncodingResolution());
		resolutions.add(new XMLAttributeEncodingResolution());
		resolutions.add(new CSSEncodingResolution());
		resolutions.add(new JavaScriptEncodingResolution());
		resolutions.add(new VBScriptEncodingResolution());
	}

	private void addHTTPResponseSplittingResolutions() {
		resolutions.add(new URLEncodingResolution());
	}

	private void addLDAPInjectionResolutions() {
		resolutions.add(new LDAPEncodingResolution());
		resolutions.add(new DNEncodingResolution());
	}

	private void addLogForgingResolutions() {
		// No resolutions implemented (yet)
	}

	private void addPathTraversalResolutions() {
		// No resolutions implemented (yet)
	}

	private void addReflectionInjectionResolutions() {
		// No resolutions implemented (yet)
	}

	private void addSecurityMisconfigurationResolutions() {
		// No resolutions implemented (yet)
	}

	private void addSQLInjectionResolutions() {
		resolutions.add(new MySQLEncodingResolution());
		resolutions.add(new OracleEncodingResolution());
		resolutions.add(new DB2EncodingResolution());
	}

	private void addXPathInjectionResolutions() {
		resolutions.add(new XPathEncodingResolution());
	}

	private void addEntryPointNotSanitizedResolution() {
		resolutions.add(new WindowsEncodingResolution());
		resolutions.add(new UnixEncodingResolution());
		resolutions.add(new HTMLEncodingResolution());
		resolutions.add(new HTMLAttributeEncodingResolution());
		resolutions.add(new XMLEncodingResolution());
		resolutions.add(new XMLAttributeEncodingResolution());
		resolutions.add(new CSSEncodingResolution());
		resolutions.add(new JavaScriptEncodingResolution());
		resolutions.add(new VBScriptEncodingResolution());
		resolutions.add(new LDAPEncodingResolution());
		resolutions.add(new DNEncodingResolution());
		resolutions.add(new MySQLEncodingResolution());
		resolutions.add(new OracleEncodingResolution());
		resolutions.add(new DB2EncodingResolution());
		resolutions.add(new XPathEncodingResolution());
	}
}
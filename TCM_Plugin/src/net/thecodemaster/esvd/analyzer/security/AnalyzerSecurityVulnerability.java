package net.thecodemaster.esvd.analyzer.security;

import net.thecodemaster.esvd.analyzer.Analyzer;
import net.thecodemaster.esvd.verifier.security.VerifierCommandInjection;
import net.thecodemaster.esvd.verifier.security.VerifierCookiePoisoning;
import net.thecodemaster.esvd.verifier.security.VerifierCrossSiteScripting;
import net.thecodemaster.esvd.verifier.security.VerifierHTTPResponseSplitting;
import net.thecodemaster.esvd.verifier.security.VerifierLogForging;
import net.thecodemaster.esvd.verifier.security.VerifierPathTraversal;
import net.thecodemaster.esvd.verifier.security.VerifierReflectionInjection;
import net.thecodemaster.esvd.verifier.security.VerifierSQLInjection;
import net.thecodemaster.esvd.verifier.security.VerifierSecurityMisconfiguration;

/**
 * @author Luciano Sampaio
 */
public class AnalyzerSecurityVulnerability extends Analyzer {

	public AnalyzerSecurityVulnerability(boolean commandInjection, boolean cookiePoisoning, boolean crossSiteScripting,
			boolean httpResponseSplitting, boolean logForging, boolean pathTraversal, boolean reflectionInjection,
			boolean securityMisconfiguration, boolean sqlInjection) {
		super();

		if (commandInjection) {
			getVerifiers().add(new VerifierCommandInjection());
		}
		if (cookiePoisoning) {
			getVerifiers().add(new VerifierCookiePoisoning());
		}
		if (crossSiteScripting) {
			getVerifiers().add(new VerifierCrossSiteScripting());
		}
		if (httpResponseSplitting) {
			getVerifiers().add(new VerifierHTTPResponseSplitting());
		}
		if (logForging) {
			getVerifiers().add(new VerifierLogForging());
		}
		if (pathTraversal) {
			getVerifiers().add(new VerifierPathTraversal());
		}
		if (reflectionInjection) {
			getVerifiers().add(new VerifierReflectionInjection());
		}
		if (securityMisconfiguration) {
			getVerifiers().add(new VerifierSecurityMisconfiguration());
		}
		if (sqlInjection) {
			getVerifiers().add(new VerifierSQLInjection());
		}
	}

}

01 + Create the preferences page.
02 + Make the plug-in and its messages MultiLingual.
03 + Create the pop-up menu when the user click on a project.
03.1 + Open the settings preference page from the pop-up menu.
03.2 + Add or Remove the project to the list of monitored projects.
03.3 + Make the buttons add and remove only available if the project is or is not already being monitored.
04 + Make the plug-in start automatically with Eclipse.
05 + Create the exception handling mechanism.
06 + Track changes on java files.
06.1 + Perform detection only in projects selected by the developer.
06.1 ** I am having problems because the BUILDER is only being invokes when the user saves the file and not automatically.
06.2 + Run the detection on a different thread.
06.3 + Inform the user which files are being processed.
07 + Create the markers for the plug-in.

08 + Implement the verifiers.
08.1 + VerifierCookiePoisoning.
08.2 + VerifierCrossSiteScripting.
08.3 + VerifierSecurityMisconfiguration.
08.4 + VerifierSQLInjection.
08.5 + VerifierUnvalidatedRedirecting.

09 + Create our own view.
10 + Create GitHub repository: https://github.com/lsampaioweb/TCM_Plugin.git
10.1 + Upload the source code.
11 + Make assignments method call work.
12 - Add all entry and exit points found on the other tools.
13 - Handle unknown methods. // "url".toString();
14 - Test calls from other classes.
15 - Add Sanitization methods.
16 - Add resolution to each vulnerability.
17 - Create Exception Handling mechanism.

XX - Check for cases where the class A invokes method C from class B, but the developer is working on class A so the class B will 
not be verified, but it can be a case where the vulnerability happens when something is introduced in class A.
XX - Add comments to classes.
XX - Make methods private.
XX - Sort methods by visibility.
XX - Remove LIST from variable names, they should be named: parameters instead of listParameters.
